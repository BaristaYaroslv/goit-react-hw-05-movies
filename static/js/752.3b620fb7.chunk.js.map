{"version":3,"file":"static/js/752.3b620fb7.chunk.js","mappings":"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","sources":["components/BackLink/BackLink.styled.js","components/BackLink/BackLink.js","components/AdditionalInformationFilm/AdditionalInformationFilm.styled.js","components/AdditionalInformationFilm/AdditionalInformationFilm.js","components/MovieInformation/MovieInformation.styled.js","components/MovieInformation/MovieInformation.js","pages/MovieDetails/MovieDetails.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n\n  :hover {\n    color: #4CAF50;\n  }\n`;\n","import { HiArrowLeft } from 'react-icons/hi';\nimport { StyledLink } from './BackLink.styled';\n\nconst BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <HiArrowLeft size=\"24\" />\n      {children}\n    </StyledLink>\n  );\n};\n\nexport default BackLink;\n","import styled from 'styled-components';\n\nexport const Wrap = styled.div`\n  border-top: 1px solid gray;\n  border-bottom: 1px solid gray;\n`;\n","import { useLocation } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport { Wrap } from './AdditionalInformationFilm.styled';\n\nconst AdditionalInformationFilm = () => {\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/movies';\n  return (\n    <Wrap>\n      <h2>Additional information</h2>\n      <ul>\n        <li>\n          <Link to=\"cast\" state={{ from: backLinkHref }}>\n            Cast\n          </Link>\n        </li>\n        <li>\n          <Link to=\"reviews\" state={{ from: backLinkHref }}>\n            Reviews\n          </Link>\n        </li>\n      </ul>\n    </Wrap>\n  );\n};\n\nexport default AdditionalInformationFilm;\n","import styled from 'styled-components';\n\n/* Стили для контейнера с фильмом */\nexport const Wrap = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 20px;\n`;\n/* Стили для обертки изображения */\nexport const WrapImage = styled.div`\n  flex: 0 0 300px;\n  margin-right: 20px;\n`;\n/* Стили для изображения */\nexport const Image = styled.img`\n  width: 100%;\n  height: auto;\n`;\n/* Стили для заголовка фильма */\nexport const H1 = styled.h1`\n  font-size: 32px;\n  font-weight: bold;\n  margin-bottom: 10px;\n`;\n/* Стили для оценки пользователей */\nexport const P = styled.p`\n  font-size: 16px;\n  margin-bottom: 10px;\n`;\n/* Стили для описания фильма */\nexport const H2 = styled.h2`\n  font-size: 24px;\n  font-weight: bold;\n  margin-top: 20px;\n  margin-bottom: 10px;\n`;","import PropTypes from 'prop-types';\nimport { Wrap, WrapImage, Image, H1, H2, P,} from './MovieInformation.styled';\n\nconst MovieInformation = ({ filmInformatioin }) => {\n  const {\n    posterPath,\n    original_title,\n    releaseDate,\n    voteAverage,\n    overview,\n    genresText,\n  } = filmInformatioin;\n\n  return (\n    <Wrap>\n      <WrapImage>\n        <Image src={posterPath} alt={original_title} />\n      </WrapImage>\n\n      <div>\n        <H1>{`${original_title} (${releaseDate})`}</H1>\n        <P>{`User Score: ${voteAverage}%`}</P>\n        <H2>Overviews</H2>\n        <P>{overview}</P>\n        <H2>Genders</H2>\n        <P>{genresText}</P>\n      </div>\n    </Wrap>\n  );\n};\n\nMovieInformation.propTypes = {\n  filmInformatioin: PropTypes.exact({\n    posterPath: PropTypes.string.isRequired,\n    original_title: PropTypes.string.isRequired,\n    releaseDate: PropTypes.string.isRequired,\n    voteAverage: PropTypes.number.isRequired,\n    overview: PropTypes.string.isRequired,\n    genresText: PropTypes.string.isRequired,\n  }).isRequired,\n};\nexport default MovieInformation;\n","import { useLocation, useParams } from 'react-router-dom';\nimport { Suspense, useEffect, useState } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport BackLink from 'components/BackLink';\nimport AdditionalInformationFilm from 'components/AdditionalInformationFilm';\nimport MovieInformation from 'components/MovieInformation';\nimport Loader from 'components/Loader';\nimport { useContextFetchFilm } from 'components/ContextFetchFilm/ContextFetchFilm';\n\nconst MovieDetails = () => {\n  // * Беру контекст для роботи із APIзапросами\n  const { apiThemoviedb } = useContextFetchFilm();\n  const [filmInformatioin, setFilmInformatioin] = useState(null);\n  const [showLoad, setShowLoad] = useState(false);\n\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/movies';\n\n  useEffect(() => {\n    const controller = new AbortController();\n    async function fetchInformation() {\n      setShowLoad(true);\n      try {\n        const {\n          poster_path,\n          overview,\n          original_title,\n          release_date,\n          vote_average,\n          genres,\n        } = await apiThemoviedb.fetchFullInformationFromFilm(\n          movieId,\n          controller\n        );\n\n        const posterPath = await apiThemoviedb.getUrlImage('w342');\n\n        setFilmInformatioin({\n          posterPath: `${posterPath}${poster_path}`,\n          original_title,\n          releaseDate: release_date.slice(0, 4),\n          voteAverage: Math.ceil(Number(vote_average) * 10),\n          overview,\n          genresText: apiThemoviedb.getGendeText(genres),\n        });\n      } catch {\n        setFilmInformatioin(null);\n        console.log('Error fetch');\n      } finally {\n        setShowLoad(false);\n      }\n    }\n\n    fetchInformation();\n\n    return () => {\n      controller.abort();\n    };\n  }, [apiThemoviedb, movieId]);\n\n  return (\n    <>\n      {showLoad && <Loader />}\n\n      {!showLoad && (\n        <>\n          <BackLink to={backLinkHref}> Go back</BackLink>\n          {filmInformatioin !== null && (\n            <MovieInformation filmInformatioin={filmInformatioin} />\n          )}\n          <AdditionalInformationFilm state={{ from: backLinkHref }} />\n          <Suspense fallback={<Loader />}>\n            <Outlet />\n          </Suspense>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["StyledLink","styled","Link","_templateObject","_taggedTemplateLiteral","_ref","to","children","_jsxs","_jsx","HiArrowLeft","size","Wrap","_location$state$from","_location$state","backLinkHref","useLocation","state","from","WrapImage","_templateObject2","Image","_templateObject3","H1","_templateObject4","P","_templateObject5","H2","_templateObject6","filmInformatioin","posterPath","original_title","releaseDate","voteAverage","overview","genresText","src","alt","concat","apiThemoviedb","useContextFetchFilm","_useState","useState","_useState2","_slicedToArray","setFilmInformatioin","_useState3","_useState4","showLoad","setShowLoad","movieId","useParams","useEffect","controller","AbortController","_fetchInformation","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$apiThemoviedb$","poster_path","release_date","vote_average","genres","_context","prev","next","fetchFullInformationFromFilm","sent","getUrlImage","slice","Math","ceil","Number","getGendeText","t0","console","log","finish","stop","apply","arguments","fetchInformation","abort","_Fragment","Loader","BackLink","MovieInformation","AdditionalInformationFilm","Suspense","fallback","Outlet"],"sourceRoot":""}