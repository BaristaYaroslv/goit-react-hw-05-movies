{"version":3,"file":"static/js/357.9a3d7809.chunk.js","mappings":"+RAEaA,EAAWC,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gHASpBC,EAAeH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,sGAOxBG,EAAYL,EAAAA,GAAAA,IAAUM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,wF,SCsDnC,EAjEa,WAEX,IAAQK,GAAkBC,EAAAA,EAAAA,KAAlBD,cACRE,GAAgCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAxCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GACpBI,GAAYC,EAAAA,EAAAA,MAAZD,QACRE,GAAwBP,EAAAA,EAAAA,UAAS,IAAGQ,GAAAN,EAAAA,EAAAA,GAAAK,EAAA,GAA7BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAAoCX,EAAAA,EAAAA,UAAS,IAAGY,GAAAV,EAAAA,EAAAA,GAAAS,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GA+BhC,OA7BAG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACQ,SAAAC,IAkB9B,OAlB8BA,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAA/B,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACoB,OAAlBtB,GAAY,GAAMoB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEU7B,EAAc8B,qBACtCtB,EACAW,GACA,KAAD,EAEyB,OALpBM,EAAWE,EAAAI,KAKjBlB,EAAQY,EAAYb,MAAMe,EAAAE,KAAA,EAED7B,EAAcgC,YAAY,QAAQ,KAAD,EAApDhB,EAAUW,EAAAI,KAChBd,EAAcD,GAAYW,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAM,GAAAN,EAAA,SAE1Bd,EAAQ,IACRqB,QAAQC,IAAI,eAAe,QAER,OAFQR,EAAAC,KAAA,GAE3BrB,GAAY,GAAOoB,EAAAS,OAAA,6BAAAT,EAAAU,OAAA,GAAAb,EAAA,0BAEtBc,MAAA,KAAAC,UAAA,CAID,OAvByC,WACVlB,EAAAiB,MAAC,KAADC,UAAA,CAoB/BC,GAEO,WACLrB,EAAWsB,OACb,CACF,GAAG,CAACzC,EAAeQ,KAGjBkC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGtC,IAAYuC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KAClBxC,GAA4B,IAAhBM,EAAKmC,SACjBF,EAAAA,EAAAA,KAAA,KAAAD,SAAG,2CAEHtC,GAA4B,IAAhBM,EAAKmC,SACjBF,EAAAA,EAAAA,KAACrD,EAAQ,CAAAoD,SACNhC,EAAKoC,KAAI,SAAAC,GACR,IAAMC,EACqB,OAAzBD,EAAQE,aAAqB,GAAAC,OACtBpC,GAAUoC,OAAGH,EAAQE,c,qmJAG9B,OACET,EAAAA,EAAAA,MAAC9C,EAAY,CAAAgD,SAAA,EACXC,EAAAA,EAAAA,KAAC/C,EAAS,CAACoD,IAAKA,EAAKG,IAAKJ,EAAQK,KAAMC,MAAM,SAC9CV,EAAAA,EAAAA,KAAA,KAAAD,SAAIK,EAAQK,QACZT,EAAAA,EAAAA,KAAA,KAAAD,SAAIK,EAAQO,cAHKP,EAAQQ,QAM/B,QAKV,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const CastListItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n`;\n\nexport const CastImage = styled.img`\n  width: 185px;\n  height: auto;\n  border-radius: 5%;\n  object-fit: cover;\n`;","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { useContextFetchFilm } from 'components/ContextFetchFilm/ContextFetchFilm';\nimport Loader from 'components/Loader';\nimport noPhoto from '../../images/images.png';\nimport {CastImage, CastList, CastListItem } from 'components/Cast/Cast.styled'\n\nconst Cast = () => {\n  // * Беру контекст для роботи із APIзапросами\n  const { apiThemoviedb } = useContextFetchFilm();\n  const [showLoad, setShowLoad] = useState(false);\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [posterPath, setPosterPath] = useState('');\n\n  useEffect(() => {\n    const controller = new AbortController();\n    async function fetchInformation() {\n      setShowLoad(true);\n      try {\n        const information = await apiThemoviedb.fetchCreditsFromFilm(\n          movieId,\n          controller\n        );\n\n        setCast(information.cast);\n\n        const posterPath = await apiThemoviedb.getUrlImage('w185');\n        setPosterPath(posterPath);\n      } catch {\n        setCast([]);\n        console.log('Error fetch');\n      } finally {\n        setShowLoad(false);\n      }\n    }\n\n    fetchInformation();\n\n    return () => {\n      controller.abort();\n    };\n  }, [apiThemoviedb, movieId]);\n\n  return (\n    <>\n      {showLoad && <Loader />}\n      {!showLoad && cast.length === 0 && (\n        <p>We don't have information about cast.</p>\n      )}\n      {!showLoad && cast.length !== 0 && (\n        <CastList>\n          {cast.map(element => {\n            const src =\n              element.profile_path !== null\n                ? `${posterPath}${element.profile_path}`\n                : noPhoto;\n\n            return (\n              <CastListItem key={element.cast_id}>\n                <CastImage src={src} alt={element.name} width=\"185\" />\n                <p>{element.name}</p>\n                <p>{element.character}</p>\n              </CastListItem>\n            );\n          })}\n        </CastList>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["CastList","styled","_templateObject","_taggedTemplateLiteral","CastListItem","_templateObject2","CastImage","_templateObject3","apiThemoviedb","useContextFetchFilm","_useState","useState","_useState2","_slicedToArray","showLoad","setShowLoad","movieId","useParams","_useState3","_useState4","cast","setCast","_useState5","_useState6","posterPath","setPosterPath","useEffect","controller","AbortController","_fetchInformation","_asyncToGenerator","_regeneratorRuntime","_callee","information","_posterPath","_context","prev","next","fetchCreditsFromFilm","sent","getUrlImage","t0","console","log","finish","stop","apply","arguments","fetchInformation","abort","_jsxs","_Fragment","children","_jsx","Loader","length","map","element","src","profile_path","concat","alt","name","width","character","cast_id"],"sourceRoot":""}