{"version":3,"file":"static/js/283.3644cd11.chunk.js","mappings":"uQA0BA,EAxBoB,SAAC,GAAiB,IAAfA,EAAc,EAAdA,QACrB,OACE,wBACGA,EAAQC,KAAI,SAAAC,GACX,OACE,2BACE,qCAAaA,EAAQC,SACrB,uBAAID,EAAQE,YAGjB,KAGN,EC8CD,EAvDgB,WAEd,IAAQC,GAAkBC,EAAAA,EAAAA,KAAlBD,cACR,GAAgCE,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BH,EAAAA,EAAAA,UAAS,IAAvC,eAAOP,EAAP,KAAgBY,EAAhB,KAuCA,OArCAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACvB,SAASC,EAAiBC,GAQxB,OAPeA,EAAYhB,KAAI,SAAAC,GAC7B,MAAO,CACLC,KAAMD,EAAQgB,eAAeC,SAC7Bf,QAASF,EAAQE,QAEpB,GAGF,CAXa,wCAad,2FACEK,GAAY,GADd,kBAG8BJ,EAAce,qBACtCV,EACAI,GALN,OAGUG,EAHV,OAQIL,EAAWI,EAAiBC,EAAYI,UAR5C,gDAUIT,EAAW,IACXU,QAAQC,IAAI,eAXhB,yBAaId,GAAY,GAbhB,6EAbc,sBAgCd,OAhCc,mCA8Bde,GAEO,WACLV,EAAWW,OACZ,CACF,GAAE,CAACpB,EAAeK,KAGjB,gCACGF,IAAY,SAACkB,EAAA,EAAD,KACXlB,GAA+B,IAAnBR,EAAQ2B,SACpB,sEAEAnB,GAAYR,EAAQ2B,OAAS,IAAK,SAAC,EAAD,CAAa3B,QAASA,MAG/D,C","sources":["components/ReviewsList/ReviewsList.js","components/Reviews/Reviews.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst ReviewsList = ({ reviews }) => {\n  return (\n    <ul>\n      {reviews.map(element => {\n        return (\n          <li>\n            <h4>Author: {element.name}</h4>\n            <p>{element.content}</p>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nReviewsList.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.exact({\n      name: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default ReviewsList;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { useContextFetchFilm } from 'components/ContextFetchFilm/ContextFetchFilm';\nimport Loader from 'components/Loader';\nimport ReviewsList from 'components/ReviewsList';\n\nconst Reviews = () => {\n  // * Беру контекст для роботи із APIзапросами\n  const { apiThemoviedb } = useContextFetchFilm();\n  const [showLoad, setShowLoad] = useState(false);\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    function normalizeReviews(information) {\n      const result = information.map(element => {\n        return {\n          name: element.author_details.username,\n          content: element.content,\n        };\n      });\n\n      return result;\n    }\n\n    async function fetchInformation() {\n      setShowLoad(true);\n      try {\n        const information = await apiThemoviedb.fetchReviewsFromFilm(\n          movieId,\n          controller\n        );\n\n        setReviews(normalizeReviews(information.results));\n      } catch {\n        setReviews([]);\n        console.log('Error fetch');\n      } finally {\n        setShowLoad(false);\n      }\n    }\n\n    fetchInformation();\n\n    return () => {\n      controller.abort();\n    };\n  }, [apiThemoviedb, movieId]);\n\n  return (\n    <>\n      {showLoad && <Loader />}\n      {!showLoad && reviews.length === 0 && (\n        <p>We don't have any reviews for this movie.</p>\n      )}\n      {!showLoad && reviews.length > 0 && <ReviewsList reviews={reviews} />}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["reviews","map","element","name","content","apiThemoviedb","useContextFetchFilm","useState","showLoad","setShowLoad","movieId","useParams","setReviews","useEffect","controller","AbortController","normalizeReviews","information","author_details","username","fetchReviewsFromFilm","results","console","log","fetchInformation","abort","Loader","length"],"sourceRoot":""}